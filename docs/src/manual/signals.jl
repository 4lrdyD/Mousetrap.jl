const signal_descriptors = Dict{Symbol, SignalDescriptor}()

function add_signal_descriptor(id::Symbol, signature::String, description::String)
    signal_descriptors[id] = SignalDescriptor(id, signature, description)
end

void_signature = "[::Data_t]) -> Nothing"

add_signal_descriptor(:activate, void_signature, "`Widget::activate()` is called or the widget is otherwise activated")
add_signal_descriptor(:startup,  void_signature, "`Application` is in the process of initializing")
add_signal_descriptor(:shutdown, void_signature, "`Application` is done initializing and will now start the main render loop")
add_signal_descriptor(:update, void_signature, "once per frame, at the start of each render loop")
add_signal_descriptor(:paint, void_signature, "once per frame, right before the associated widget is drawn")
add_signal_descriptor(:realize, void_signature, "widget is fully initialized and about to be rendered for the first time")
add_signal_descriptor(:unrealize, void_signature, "widget was hidden and will seize being displayed")
add_signal_descriptor(:destroy, void_signature, "A widgets ref count reaches 0 and its finalizer is called")
add_signal_descriptor(:hide, void_signature, "`Widget::hide``is called or a widget becomes no longer visible otherwise")
add_signal_descriptor(:show, void_signature, "widget is rendered to the screen for the first time")
add_signal_descriptor(:map, void_signature, "widgets size allocation was assigned")
add_signal_descriptor(:unmap, void_signature, "widget or one of its parents is hidden")
add_signal_descriptor(:close_request, "[::Data_t]) -> allow_close::WindowCloseRequestResult", "mousetrap or the users operating system requests for a window to close")
add_signal_descriptor(:closed, void_signature, "popover is closed")
add_signal_descriptor(:activate_default_widget, void_signature, "widget assigned via Window::set_default_widget is activated is activated")
add_signal_descriptor(:activate_focused_widget, void_signature, "widget that currently holds focus is activated")
add_signal_descriptor(:clicked, void_signature, "user activates the widget by clicking it with a mouse or touch-device")
add_signal_descriptor(:toggled, void_signature, "buttons internal state changes")
add_signal_descriptor(:text_changed, void_signature, "underlying text buffer is modified in any way")
add_signal_descriptor(:selection_changed, "position::Integer, n_items::Integer, [::Data_t]) -> Nothing", "number or index of selected elements changes")
add_signal_descriptor(:key_pressed, "code::KeyCode, modifiers::ModifierState, [::Data_t]) -> Nothing", "user pressed a non-modifier key")
add_signal_descriptor(:key_released, "code::KeyCode, modifiers::ModifierState, [::Data_t]) -> Nothing", "user releases a non-modifier key")
add_signal_descriptor(:modifiers_changed, "code::KeyCode, modifiers::ModifierState, [::Data_t]) -> Nothing", "user presses or releases a modifier key")
add_signal_descriptor(:drag_begin, "start_x::AbstractFloat, start_y::AbstractFloat, [::Data_t]) -> Nothing", "first frame at which a drag gesture is recognized")
add_signal_descriptor(:drag, "x_offset::AbstractFloat, y_offset::AbstractFloat, [::Data_t]) -> Nothing", "once per frame while a drag gesture is active")
add_signal_descriptor(:drag_begin, "x_offset::AbstractFloat, y_offset::AbstractFloat, [::Data_t]) -> Nothing", "drag gesture seizes to be active")
add_signal_descriptor(:click_pressed, "n_presses::Integer, x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Nothing", "User presses a mouse button or touch-device")
add_signal_descriptor(:click_released, "n_presses::Integer, x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Nothing", "User releases a mouse button or touch-device")
add_signal_descriptor(:click_stopped, void_signature, "once when a series of clicks ends")
add_signal_descriptor(:focus_gained, void_signature, "Widget acquires input focus")
add_signal_descriptor(:focus_lost, void_signature, "Widget looses input focus")
add_signal_descriptor(:pressed, "x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Nothing", "long-press gesture is recognized")
add_signal_descriptor(:press_cancelled, void_signature, "long-press gesture seizes to be active")
add_signal_descriptor(:motion_enter, "x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Nothing", "cursor enters allocated area of the widget for the first time")
add_signal_descriptor(:motion, "x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Nothing", "once per frame while cursor is inside allocated area of the widget")
add_signal_descriptor(:motion_leave, void_signature, "cursor leaves allocated area of the widget")
add_signal_descriptor(:scale_changed, "scale::AbstractFloat, [::Data_t]) -> Nothing", "distance between two fingers recognized as a pinch-zoom-gesture changes")
add_signal_descriptor(:rotation_changed, "angle_absolute_radians::AbstractFloat, angle_delta_radians::AbstractFloat, [::Data_t]) -> Cvoid", "angle between two fingers recognized as a rotate-gesture changes")
add_signal_descriptor(:scroll_begin, void_signature, "user initiates a scroll gesture using the mouse scrollwheel or a touch-device")
add_signal_descriptor(:scroll, "x_delta::AbstractFloat, y_delta::AbstractFloat, [::Data_t]) -> also_invoke_default_handlers::Bool", "once per frame while scroll gesture is active")
add_signal_descriptor(:scroll_end, void_signature, "user seizes scrolling")
add_signal_descriptor(:kinetic_scroll_decelerate, "x_velocity::AbstractFloat, y_velocity::AbstractFloat, [::Data_t]) -> Cvoid", "widget is still scrolling due to scrolling \"inertia\"")
add_signal_descriptor(:stylus_down, "x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Cvoid", "stylus makes physical contact with the touchpad")
add_signal_descriptor(:stylus_up, "x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Cvoid", "stylus seizes to make contact with the touchpad")
add_signal_descriptor(:proximity, "x::AbstractFloat, y::AbstractFloat, [::Data_t]) -> Cvoid", "stylus enters or leaves maximum distance recognized by the touchpad")
add_signal_descriptor(:swipe, "x_velocity::AbstractFloat, y_velocity::AbstractFloat, [::Data_t]) -> Cvoid", "swipe gesture is recognized")
add_signal_descriptor(:pan, "::PanDirection, offset::AbstractFloat, [::Data_t]) -> Cvoid", "pan gesture is recognized")
add_signal_descriptor(:value_changed, void_signature, "`value` property of underlying adjustment changes")
add_signal_descriptor(:properties_changed, void_signature, "any property other than `value` of underlying adjustment changes")
add_signal_descriptor(:wrapped, void_signature, "`SpinButton` for whom `is_wrapped` is enabled has its value increased or decreased past the given range")
add_signal_descriptor(:scroll_child, "::ScrollType, is_horizontal::Bool, [::Data_t]) -> Cvoid", "user triggers a scroll action")
add_signal_descriptor(:render, void_signature, "`RenderArea` is requested to draw the the screens framebuffer")
add_signal_descriptor(:resize, "width::Integer, height::Integer, [::Data_t]) -> void", "allocated size of `RenderArea` changes while it is realized")
add_signal_descriptor(:activated, void_signature, "`Action` is activated")
add_signal_descriptor(:revealed, void_signature, "child is fully revealed (after the animation has finished)")
add_signal_descriptor(:page_reordered, "page_index::Integer, [::Data_t]) -> Cvoid", "page of `Notebook` changes position")
add_signal_descriptor(:page_added, "page_index::Integer, [::Data_t]) -> Cvoid", "number of pages increases while the widget is realized")
add_signal_descriptor(:page_removed, "page_index::Integer, [::Data_t]) -> Cvoid", "number of pages decreases while the widget is realized")
add_signal_descriptor(:page_selection_changed, "page_index::Integer, [::Data_t]) -> Cvoid", "currently visible page changes")
add_signal_descriptor(:items_changed, "position::Integer, n_removed::Integer, n_added::Integet, [::Data_t]) -> Cvoid", "list of items is modified")
